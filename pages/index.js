import Head from 'next/head';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { io } from 'socket.io-client';
import styled from 'styled-components';

const Main = styled.div`
  background-color: red;
`;
const socket = io('http://localhost:8000', {
  transports: ['websocket'],
});
export default function Home() {
  // const [isDrawing, setIsDrawing] = useState(false);
  // const canvasRef = useRef(null);
  // const contextRef = useRef(null);
  // const imageUrl = useRef(null);
  // const [room, setRoom] = useState('');
  // const [imageData, setImageData] = useState('');
  // const [canvascontext, setCanvascontext] = useState('');
  // // const [clearCanvas, setClearCanvas] = useState(true);
  // const [stateList, setStateList] = useState([]);
  // //  CANVAS FUNCTIONS FOR DRAWING DELETING
  // function startDrawing({ nativeEvent }) {
  //   const { offsetX, offsetY } = nativeEvent;
  //   contextRef.current.beginPath();
  //   contextRef.current.moveTo(offsetX, offsetY);
  //   setIsDrawing(true);
  // }
  // const finishDrawing = () => {
  //   contextRef.current.closePath();
  //   setIsDrawing(false);
  //   const canvas = canvasRef.current;
  //   const imgData = canvas.toDataURL();
  //   socket.emit('canvas', { post: imgData });
  // };
  // // const deleteCanvas = () => {
  // //   const canvas = canvasRef.current;
  // //   const context = canvas.getContext('2d');
  // //   context.clearRect(0, 0, canvas.width, canvas.height);
  // // };
  // const draw = useCallback(
  //   ({ nativeEvent }) => {
  //     if (!isDrawing) {
  //       return;
  //     }
  //     const { offsetX, offsetY } = nativeEvent;
  //     contextRef.current.lineTo(offsetX, offsetY);
  //     contextRef.current.stroke();
  //   },
  //   [isDrawing],
  // );
  // //  canvas setup
  // useEffect(() => {
  //   const canvas = canvasRef.current;
  //   canvas.width = window.innerWidth;
  //   canvas.height = window.innerHeight;
  //   canvas.style = `${window.innerWidth / 4}px`;
  //   canvas.style = `${window.innerHeight / 4}px`;
  //   const context = canvas.getContext('2d');
  //   setCanvascontext(context);
  //   context.lineCap = 'round';
  //   context.strokeStyle = 'red';
  //   context.lineWidth = 5;
  //   contextRef.current = context;
  // }, []);
  // useEffect(() => {
  //   socket.on('connect', () => {});
  //   return () => {
  //     socket.off('connect');
  //     socket.off('disconnect');
  //     socket.off('pong');
  //   };
  // }, []);
  // //   //  CANVAS FUNCTIONS FOR DRAWING DELETING

  // //  socket io useStates
  // const [name, setName] = useState('');
  // const [list, setList] = useState([]);

  // //  HANDLING POSTING TO SOCKET.IO
  // // chat messages
  // const handleChatpost = () => {
  //   socket.emit('chat', { post: name });
  // };
  // // setting Canvas for other users

  // // getting message
  // useEffect(() => {
  //   socket.on('message', (data) => {
  //     setList([...list, data]);
  //   });
  //   socket.on('canvasState', (data) => {
  //     setStateList(data);
  //     // console.log(data);
  //   });
  // });
  // socket.on('reconnect_error', (err) => {
  //   console.log(`connect_error due to ${err.message}`);
  // });
  // useEffect(() => {
  //   const image = new Image();
  //   image.onload = function () {
  //     canvascontext.drawImage(image, 0, 0);
  //   };
  //   // console.log(stateList.post);
  //   image.src = stateList.post;
  // });
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>chat</Main>
    </div>
  );
}
